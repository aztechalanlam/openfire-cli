#!/bin/bash

# 2016 lgg https://github.com/lgg/openfire-cli
# needed jq 1.4 (apt install jq)
# https://stedolan.github.io/jq/

# usage ./of-cli-uapi ACTION USERNAME PASSWORD

## Define this variables
apiPort="9091"
apiHost="localhost"
apiKey="YOURAPIKEYHERE"

## Internal vars

ofUsage="command usage: ./of-cli-uapi ACTION USERNAME (PASSWORD|GROUP|NAME)"
ofActions="ACTIONS: list/get/add/delete/update/addtogroup/deletefromgroup; if group in addtogroup not exist it will be created"

## Check given arguments
if [ -z "$1" ]; then
    echo "ERR: no ACTION specified"
    echo "$ofUsage"
    echo "$ofActions"
    exit 1
else
    apiAction="$1"
fi
if [[ "$apiAction" != "list" && -z "$2" ]]; then
    echo "ERR: no USERNAME specified"
    echo "$ofUsage"
    exit 1
else
    apiUser="$2"
fi
if [[ "$apiAction" = "add" ]]; then
    if [[ -z "$3" ]]; then
	echo "ERR: no PASSWORD specified"
	echo "$ofUsage"
	exit 1
    else
	apiPass="$3"
    fi
fi

if [[ "$apiAction" = "update" ]]; then
    if [[ -z "$3" ]]; then
	echo "ERR: no NAME specified"
	echo "$ofUsage"
	exit 1
    else
	apiName="$3"
    fi
fi

if [[ ("$apiAction" = "addtogroup" ||"$apiAction" = "deletefromgroup")  && -z "$3" ]]; then
    echo "ERR: no GROUP specified"
    echo "$ofUsage"
    exit 1
else
    apiGroup="$3"
fi

if [ "$apiAction" = "addchatroom" ]; then
    if [[ -z "$2" ]]; then
        echo "ERR: no chat service specified"
        echo "$ofUsage"
        exit 1
    elif [[ -z "$3" ]]; then
				    echo "ERR: no chat room specified"
        echo "$ofUsage"
        exit 1
				elif [[ -z "$4" ]]; then
				    echo "ERR: no chat room Name"
        echo "$ofUsage"
        exit 1
				elif [[ -z "$5" ]]; then
				    echo "ERR: no chat room description"
        echo "$ofUsage"
        exit 1
				elif [[ -z "$6" ]]; then
				    echo "ERR: no chat room topic"
        echo "$ofUsage"
        exit 1
				elif [[ -z "$7" ]]; then
				    echo "ERR: no group"
        echo "$ofUsage"
        exit 1
				else
				apiChatService="$2"
				apiChatRoomID="$3"
				apiChatRoomName="$4"
				apiChatDesc="$5"
				apiChatTopic="$6"
				apiGroup="$7"
				echo "apiChatService:$apiChatService"
				echo "apiChatRoomID:$apiChatRoomID"
				echo "apiChatRoomName:$apiChatRoomName"
				echo "apiChatDesc:$apiChatDesc"
				echo "apiChatTopic:$apiChatTopic"
				echo "apiGroup:$apiGroup"
				fi
    
fi
## curl help:
# -k = --insecure = allow self-signed certificates
# -s = --silent = hide curl output (table with speed, downloaded, etc)

## functions
function getUser {
    apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/users/$apiUser"
    userExist=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -X GET "$apiUrl" | jq '.' | jq {username} | jq '.[] != null')
    if [[ $apiAction = "get" ]]; then echo $userExist; fi
    if [[ "$userExist" = "true" ]]; then
	echo "OK"
	return 0
    else
	echo "FAIL"
	return 1
    fi
}

function listUsers {
    apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/users/"
    users=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -X GET "$apiUrl" | jq -r '.users' | jq -r '.[].username')
    if [ -z "$users" ]; then
        echo "ERR: wrong API AUTH KEY"
        exit 1
    else
        arrUsers=($users)
        echo "OpenFire registered users: "
        for i in ${arrUsers[@]}; do echo $i; done
    fi
}

function addUser {
    apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/users/"
    apiPostData=$(jq -n --arg u "$apiUser" --arg p "$apiPass" '{"username": $u, "password": $p}')
    userResult=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -d "$apiPostData" -X POST "$apiUrl" | jq '.' | jq {exception} | jq '.[] == "UserAlreadyExistsException"')
    if [ "$userResult" = "true" ]
    then
        echo "ERR: user already registered"
        exit 1
    else
        if [ getUser ]; then
            echo "Done, user created"
        else
            echo "ERR: user already exists or wrong API key"
            exit 1
        fi
    fi
}

function deleteUser {
    apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/users/$apiUser"
    userResult=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -X DELETE "$apiUrl" | jq '.' | jq {exception} | jq '.[] == "UserNotFoundException"')
    if [ "$userResult" = "true" ]
        then
            echo "ERR: no user with this username found. Didn't delete."
            exit 1
        else
            if [ !getUser ]; then
                echo "Done, user deleted"
            else
                echo "ERR: can't delete user or wrong API key"
                exit 1
            fi
        fi
}

function addUsertogroup {
    if ! getUser; then
        echo "ERR: user $apiUser not found or wrong API key"
        exit 1
    else
	apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/users/$apiUser/groups/$apiGroup"
	groupResult=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -X POST "$apiUrl" | jq '.' | jq {exception} | jq '.[] == "GroupNotFoundException"')
	if [ "$groupResult" = "true" ]
        then
            echo "ERR: no such GROUP $apiGroup to add. Not added."
            exit 1
        else
	    echo "Done, user added to group"
        fi
    fi
}

function deleteUserfromgroup {
    if  ! getUser ; then
        echo "ERR: user $apiUser not found or wrong API key"
        exit 1
    else
	apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/users/$apiUser/groups/$apiGroup"
	groupResult=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -X DELETE "$apiUrl" | jq '.' | jq {exception} | jq '.[] == "GroupNotFoundException"')
	if [ "$groupResult" = "true" ]
	    then
	        echo "ERR: no such GROUP $apiGroup to delete from"
	        exit 1
        else
                echo "Done, user deleted from group"
        fi
    fi
}

function updateUsername {
	apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/users/$apiUser"
	apiPostData=$(jq -n --arg u "$apiUser" --arg n "$apiName" '{"username": $u, "name": $n}')
	userResult=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -d "$apiPostData" -X PUT "$apiUrl" | jq '.' | jq {exception} | jq '.[] == "UserNotFoundException"')
	if [ "$userResult" = "true" ]
	    then
	        echo "ERR: no such USER $apiUser to update"
	        exit 1
        else
                echo "Done, user name updated"
        fi
}

function addChatRoom {
    apiUrl="https://$apiHost:$apiPort/plugins/restapi/v1/chatrooms?servicename=$apiChatService&sendInvitations=false"
    apiPostData=$(jq -n --arg roomid "$apiChatRoomID" --arg roomname "$apiChatRoomName" --arg desc "$apiChatDesc" --arg group "$apiGroup" --arg t "$apiChatTopic" '{"roomName": $roomid, "description": $desc,"maxUsers": 500, "naturalName": $roomname,"subject": $t, "memberGroups": [ $group ], "persistent": true, "publicRoom": false, "registrationEnabled": false, "canAnyoneDiscoverJID": false, "canOccupantsChangeSubject": false, "membersOnly": true, "moderated": true,"allowPM": "none"}')
    userResult=$(curl -sk -H "Authorization: $apiKey" -H "Accept: application/json" -H "Content-Type: application/json" -d "$apiPostData" -X POST "$apiUrl" | jq '.' | jq {exception} | jq '.[] == "UserAlreadyExistsException"')
    if [ "$userResult" = "true" ]
    then
        echo "ERR: Group already registered"
        exit 1
    else
        if [ getUser ]; then
            echo "Done, Group created"
        else
            echo "ERR: user already exists or wrong API key"
            exit 1
        fi
    fi
}


## get and execute action
if [ "$apiAction" = "get" ]
then
    getUser
elif [ "$apiAction" = "list" ]
then
    listUsers
elif [ "$apiAction" = "add" ]
then
    addUser
elif [ "$apiAction" = "delete" ]
then
    deleteUser
elif [ "$apiAction" = "update" ]
then
    updateUsername
elif [ "$apiAction" = "addtogroup" ]
then
    addUsertogroup
elif [ "$apiAction" = "deletefromgroup" ]
then
    deleteUserfromgroup
elif [ "$apiAction" = "addchatroom" ]
then
    addChatRoom
else
    echo "ERR: wrong ACTION"
    echo "$ofUsage"
    echo "$ofActions"
    exit 1
fi
